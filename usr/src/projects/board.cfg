UROOT=/data/data/u.root
UR=/data/data/u.r
BIN=${UROOT}/bin
ADB_HOST=192.168.0.62:5555
TARGET=armeabi-v7a


CRYSTAX_PATH=${UROOT}/android/crystax
GNU_STL=${CRYSTAX_PATH}/sources/cxx-stl/gnu-libstdc++/4.9/libs/${TARGET}/libgnustl_shared.so
PANDA_PATH=${UROOT}/usr/src/extra/panda3d.android

# config temporary for Android.mk inclusion

if [ -f build.gradle ]
then
    cat > board.tmp <<END
CRYSTAX_PATH := ${CRYSTAX_PATH}
LOCAL_ARM_MODE := arm
LOCAL_DISABLE_RELRO := true

END

export adb="${BIN}/adb -s ${ADB_HOST}"




#======================================= PANDA3D MODULE ====================================

if [ -f use.panda3d ]
then

    mkdir -p prebuilt/${TARGET}
    mkdir -p prebuilt/python-${TARGET}


    if echo ${TARGET}|grep -q arm
    then
        PANDA_ARCH=armv7a
    else
        echo "Error ${TARGET} panda config not supported, please edit board.cfg and PR"
        ec=1
    fi

    echo "  + panda3d [${PANDA_ARCH}] from [${PANDA_PATH}]"

    #cp ${GNU_STL} prebuilt/${TARGET}/

    #-------------------------------------------------------------------------
    echo
    echo "       [ panda3d libs ]"
    echo

    for lib in $(find ${PANDA_PATH}/built/|grep /lib|grep \.so$|grep -v 35m- )
    do
        echo "       + $(basename $lib)"
        cp -f $lib prebuilt/${TARGET}/
    done

    #-------------------------------------------------------------------------
    echo
    echo "       [ third party libs ]"
    echo

    for lib in $(find ${PANDA_PATH}/thirdparty/android-libs-${PANDA_ARCH}/*/*lib/lib* -type f|grep \.so$)
    do
        echo "       + $(basename $lib)"
        cp -f $lib prebuilt/${TARGET}/
        
        #cp -vf /data/data/u.root/usr/src/projects/panda3d_sample_00.android/libBullet.so  prebuilt/libbullet.so
        #read
    done

    #-------------------------------------------------------------------------
    echo
    echo "       [ python modules ]"
    echo

    for lib in $(find ${PANDA_PATH}/built/|grep -v /lib|grep \.so$)
    do
        newlib=$(basename $lib)
        newlib=$(basename $newlib .cpython-35m-i386-linux-gnu.so)
        echo "       + panda3d.$newlib"
        cp -f $lib prebuilt/python-${TARGET}/${newlib}.so
        if [ -d ${UR}/usr/lib/python3.5/site-packages ]
        then
            #echo "syncing board"
            mkdir -p ${UR}/usr/lib/python3.5/site-packages/panda3d
            echo "import sys; print('Loading Panda3D',file=sys.stderr)" > ${UR}/usr/lib/python3.5/site-packages/panda3d/__init__.py
            cp -f $lib ${UR}/usr/lib/python3.5/site-packages/panda3d/${newlib}.so
            chmod 777 -R ${UR}/usr/lib/python3.5/site-packages/panda3d/
        fi
    done


else
    echo "  - panda3d "
fi
#======================================= /PANDA3D MODULE ====================================




LOCAL_PATH=$(pwd)





    #help gradle to call ndk-build and gather libs without having to learn another scripter

    cat > ndk-build.tmp <<END
#!${BIN}/bash
echo "

            ================== crystax ndk-build ${LOCAL_PATH}/jni/ ===========

"
if ${CRYSTAX_PATH}/ndk-build -C .
then
    echo " ... merging build in final build ..."
    cp -rf "${LOCAL_PATH}/prebuilt/${TARGET}" "${LOCAL_PATH}/build/intermediates/ndk/debug/lib/" | wc -l
    echo " ... merging prebuild in final build ..."
    cp -rf "${LOCAL_PATH}/libs/${TARGET}" "${LOCAL_PATH}/build/intermediates/ndk/debug/lib/" | wc -l

#    rm -vf "${LOCAL_PATH}/build/intermediates/ndk/debug/lib/${TARGET}/libp3android.so"
    ec=0
else
    echo "
    !! ndk build failed !!
"
    ec=1
fi
echo "

            ======================== done ============================

"
exit \$ec
END
    chmod 777 ndk-build.tmp


    if arch|grep -q arm
    then
        export LD_LIBRARY_PATH=${UROOT}/lib-armhf:${LD_LIBRARY_PATH}
    else
        export LD_LIBRARY_PATH=${UROOT}/lib32:${LD_LIBRARY_PATH}
    fi
fi

